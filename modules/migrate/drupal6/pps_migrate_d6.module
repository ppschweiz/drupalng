<?php

define('PPS_MIGRATE_D6_AUTOTAGGING', FALSE);
define('PPS_MIGRATE_D6_TAGTHENET_URL', 'http://tagthe.net/api/');

/**
 * Implements hook_flush_caches().
 */
function pps_migrate_d6_flush_caches() {
  pps_migrate_d6_register_user_migrations();
  pps_migrate_d6_register_taxonomy_migrations();
  pps_migrate_d6_register_files_migrations();
  pps_migrate_d6_register_node_migrations();
  pps_migrate_d6_register_comment_migrations();
}

/**
 * Register user migrations
 */
function pps_migrate_d6_register_user_migrations() {
  $arguments = pps_migrate_common_arguments() + array(
    'description' => t('Migration of users'),
    'machine_name' => 'User',
  );
  Migration::registerMigration('PPSUserMigration', $arguments['machine_name'], $arguments);
}

/**
 * Register user migrations
 */
function pps_migrate_d6_register_files_migrations() {
  $file_arguments = pps_migrate_common_arguments() + array(
    'machine_name' => 'Files',
    'description' => t('Import files'),
    'user_migration' => 'User',
    'source_dir' => '/Users/christian/Development/pps_d7/legacy',
    'destination_dir' => 'public://legacy_files',
  );
  Migration::registerMigration('DrupalFile6Migration', $file_arguments['machine_name'], $file_arguments);
}

/**
 * Register taxonomy migrations
 */
function pps_migrate_d6_register_taxonomy_migrations() {
  $vocabulary_arguments = array(
    array(
      // Migrate media companies
      'description' => t('Migration of Media terms'),
      'machine_name' => 'MediaCompanies',
      'source_vocabulary' => '2',
      'destination_vocabulary' => 'media_companies',
    ),
    array(
      // Migrate event type
      'description' => t('Migration of Event Types'),
      'machine_name' => 'EventTypes',
      'source_vocabulary' => '1',
      'destination_vocabulary' => 'event_types',
    ),
  );

  $common_vocabulary_arguments = pps_migrate_common_arguments() + array(
    'class_name' => 'DrupalTerm6Migration',
    'soft_dependencies' => array('User'),
  );

  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }
}

/**
 * Register node migrations
 */
function pps_migrate_d6_register_node_migrations() {
  $node_arguments = array(
    // Bild (gallery_image)
     /**
      * Part of the gallery migration.
      */
    // Communiqué (communique)
    array(
      'class_name' => 'PPSAttachmentNodeMigration',
      'description' => t('Migration of Communique'),
      'machine_name' => 'Communique',
      'source_type' => 'communique',
      'destination_type' => 'communique',
      'tag mappings' => array(
        'field_tags' => 'tag_all',
      ),
    ),
    // Event (event)
    array(
      'class_name' => 'PPSEventMigration',
      'description' => t('Migration of Events'),
      'machine_name' => 'Event',
      'source_type' => 'event',
      'destination_type' => 'event',
    ),
    // Gallery (gallery)
    array(
      'class_name' => 'PPSGalleryMigration',
      'description' => t('Migration of Galleries'),
      'machine_name' => 'Gallery',
      'source_type' => 'gallery',
      'destination_type' => 'gallery',
      'structural' => 'Presse',
    ),
    // Group (og)
      /**
       * Groups are not in use.
       * All Working groups are published as pages.
       */
    // Group Post (ogpost)
    /**
       * There is only one test node. So no need to migrate.
       */
    // Group Wiki (ogwiki)
      /**
       * No records.
       */
    // Job (job)
      /**
       * Obsolete, wont't be migrated. Only five records by the way.
       */
    // Page (page)
    array(
      // Meeting minutes
      'class_name' => 'PPSMinutesMigration',
      'description' => t('Migration of Minutes'),
      'machine_name' => 'Minutes',
      'source_type' => 'page',
      'destination_type' => 'minutes',
      'parents' => array(
        1187, 1284, 318, 636, 637, 638, 1099
      ),
      'tag mappings' => array(
        'field_tags' => 'tag_all',
      ),
      'access mappings' => array(
        'parent' => array(
          1187 => 'Geschäftsleitung',
          1284 => 'Präsidium',
          318 => 'Piratenversammlung',
          636 => 'Vorstand',
          637 => 'Vorstand',
          638 => 'Vorstand',
          1099 => 'Vorstand',
        ),
      ),
    ),
    array(
      // Message in a Bottle
      'class_name' => 'PPSNewsletterMigration',
      'description' => t('Migration of messages in a bottle'),
      'machine_name' => 'Newsletter',
      'source_type' => 'page',
      'destination_type' => 'newsletter',
      'parents' => array(
        1061, 1058, 419,
      ),
    ),
    array(
      // Political positions
      'class_name' => 'PPSNodehierarchyMigration',
      'description' => t('Migration of political positions'),
      'machine_name' => 'Positions',
      'source_type' => 'page',
      'destination_type' => 'position',
      'parents' => array(
        390,
      ),
      'tag mappings' => array(
        'field_tags' => 'tag_all',
      ),
    ),
    array(
      // Teams
      'class_name' => 'PPSTeamMigration',
      'description' => t('Migration of teams'),
      'machine_name' => 'Teams',
      'source_type' => 'page',
      'destination_type' => 'team',
      'parents' => array(
        675, // Working groups
        1230, // Elected teams
      ),
      'access mappings' => array(
        'nid' => array(
          676 => 'AG KAMP',
          677 => 'AG TNT',
          681 => 'AG MMD',
          682 => 'AG ROA',
          683 => 'AG DI',
          684 => 'AG MOD',
          685 => 'AG FUND',
          1013 => 'AG POD',
          1014 => 'AG SHOP',
          1015 => 'AG PPP',
          1016 => 'AG PR',
          1286 => 'Geschäftsprüfungskommission',
          1421 => 'Antragskommission',
        ),
      ),
    ),
//    array(
//      'class_name' => 'PPSPageMigration',
//      'description' => t('Migration of Page'),
//      'machine_name' => 'Page',
//      'source_type' => 'page',
//      'destination_type' => 'page',
//      'dependencies' => array(
//        'Minutes',
//        'Newsletter',
//        'Positions',
//        'Teams',
//      ),
//      'excluded nids' => array(
//        106, 108, 111, 114, 116, 118, 128, 129, 176, 177, 308, 310, 311,
//        664, 665, 719, 914, 986, 1166, 1167, 1168, 1169, 1172, 1174,
//        1175, 1176, 1194, 1195, 1209, 1210, 1211, 1212, 1232,
//      ),
//    ),
    // Panel (panel)
      /**
       * No records.
       */
    // Politblog (politblog)
    array(
      'class_name' => 'PPSAttachmentNodeMigration',
      'description' => t('Migration of Politblog'),
      'machine_name' => 'Politblog',
      'source_type' => 'politblog',
      'destination_type' => 'article',
      'tag mappings' => array(
        'field_tags' => 'tag_all',
      ),
      'structural' => 'Politblog',
    ),
    // Pressespiegel (press)
    array(
      'class_name' => 'PPSPressReviewMigration',
      'description' => t('Migration of Press Reviews'),
      'machine_name' => 'Press',
      'source_type' => 'press',
      'destination_type' => 'press_review',
      'dependencies' => array('MediaCompanies'),
      'tag mappings' => array(
        'field_tags' => 'tag_all',
      ),
    ),
    // Product (product)
      /**
       * No records.
       */
    // Produktzusammenstellung (product_kit)
      /**
       * No records.
       */
    // Umfrage (poll)
      /**
       * No records.
       */
  );

  $common_node_arguments = pps_migrate_common_arguments() + array(
    'user_migration' => 'User',
    'dependencies' => array('Files'),
  );

  foreach ($node_arguments as $arguments) {
    $arguments += $common_node_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }
}

/**
 * Register comment migrations
 */
function pps_migrate_d6_register_comment_migrations() {
  $comment_arguments = array(
    array(
      'machine_name' => 'PolitblogComments',
      'description' => t('Import Politblog comments'),
      'source_type' => 'politblog',
      'destination_type' => 'article',
      'node_migration' => 'Politblog',
    ),
    array(
      'machine_name' => 'CommuniqueComments',
      'description' => t('Import Communique comments'),
      'source_type' => 'communique',
      'destination_type' => 'communique',
      'node_migration' => 'Communique',
    ),
//    array(
//      'machine_name' => 'PageComments',
//      'description' => t('Import Page comments'),
//      'source_type' => 'page',
//      'destination_type' => 'article',
//      'node_migration' => 'Page',
//    ),
  );
  $common_comment_arguments = pps_migrate_common_arguments() + array(
    'class_name' => 'DrupalComment6Migration',
    'user_migration' => 'User',
    'default_uid' => 1,
  );
  foreach ($comment_arguments as $arguments) {
    $arguments += $common_comment_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }
}

/**
 * Common arguments
 *
 * A set of arguments to be used in all migrations.
 *
 * @return
 *   Array of arguments.
 */
function pps_migrate_common_arguments(){
  $arguments = drupal_static(__FUNCTION__);
  if (!isset($arguments)) {
    $arguments = array(
      'source_connection' => 'legacy',
      'source_version' => 6,
      'format_mappings' => array(
        '1' => 'plain_text',
        '2' => 'textile',
        '3' => 'textile',
        '4' => 'full_html',
        '5' => 'plain_text',
        '6' => 'textile',
      ),
      'conversion_mappings' => array(
        '1' => 'migrate_plain',
        '2' => 'migrate_html',
        '3' => 'migrate_html',
        '4' => 'migrate_html',
        '5' => 'migrate_plain',
//        '6' => 'none',
      ),
      'domain_mappings' => array(
        0 => 'piratenpartei_ch',
        2 => 'partipirate_ch',
        3 => 'pirateparty_ch',
        4 => 'partitopirata_ch',
      ),
    );
  }
  return $arguments;
}

/**
 * Implements hook_migrate_api().
 */
function pps_migrate_d6_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

function pps_migrate_d6_fetch_tags($text) {
  $terms = array(
    'all' => array(),
    'topic' => array(),
    'person' => array(),
    'location' => array(),
    'language' => array(),
  );
  if (PPS_MIGRATE_D6_AUTOTAGGING) {
    $url = PPS_MIGRATE_D6_TAGTHENET_URL;
    $text = check_markup($text, 'migrate_plain', NULL, FALSE);
    $text = htmlspecialchars_decode($text);
    $data = 'text='. urlencode($text);
    $data .= '&count=5';
    $options = array(
      'data' => $data,
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
      ),
      'method' => 'POST',
    );
    $response = drupal_http_request($url, $options);
    if ($response->code != 200) {
      watchdog(__FUNCTION__, 'Received response code @code from Tagthe.net. @data', array('@code' => $response->code, '@data' => json_encode($response)), WATCHDOG_ERROR);
      return array();
    }
    $xml = $response->data;
    $dom = DOMDocument::loadXML($xml);
    $xp = new DOMXPath($dom);
    $dims = $xp->evaluate("/memes/meme/dim");
    for ($i = 0; $i < $dims->length; $i++) {
      $dim = $dims->item($i);
      $type = $dim->getAttribute("type");
      $items = $xp->evaluate("item", $dim);
      for ($j = 0; $j < $items->length; $j++) {
        $item = $items->item($j);
        $terms[$type][] = $item->nodeValue;
        if ($type != 'language') {
          $terms['all'][] = $item->nodeValue;
        }
      }
    }
  }
  return $terms;
}

/**
 * Convert HTML to Textile
 *
 * Uses pandoc to convert any HTML to Textile.
 *
 * The text ist stored to a temporary file in order to prevent command
 * line escaping pitfalls.
 *
 * @param $text
 *   The text to be converted.
 * @return
 *   Teh resulting textile text.
 */
function pps_migrate_d6_to_textile($text) {
  $file = tmpfile();
  $meta_data = stream_get_meta_data($file);
  $filename = $meta_data['uri'];
  fwrite($file, $text);
  $pandoc = variable_get('shell_cmd_pandoc', '/usr/bin/pandoc');
  $text = shell_exec("$pandoc -f html -t textile $filename");
  fclose($file);
  return $text;
}

/**
 * Parse footnotes
 *
 * @see _footnotes_filter()
 */
function pps_migrate_d6_footnotes_filter($text = '') {
  $text = preg_replace( '|\[fn([^\]]*)\]|', '<fn$1>', $text);
  $text = preg_replace( '|\[/fn\]|', '</fn>', $text);
  $text = preg_replace( '|\[footnotes([^\]]*)\]|', '<footnotes$1>', $text);

  $open_tags = preg_match_all("|<fn([^>]*)>|", $text, $foo);
  $close_tags = preg_match_all("|</fn>|", $text, $foo);

  if ($open_tags == $close_tags + 1) {
    $text = $text . '</fn>';
  }
  elseif ($open_tags > $close_tags + 1) {
    watchdog(__FUNCTION__, 'You have unclosed fn tags. This is invalid and will produce unpredictable results.', WATCHDOG_NOTICE);
  }

  $pattern = '|<fn([^>]*)>(.*?)</fn>|s';
  $text = preg_replace_callback($pattern , 'pps_migrate_d6_footnotes_replace_callback', $text);

  $footer = pps_migrate_d6_footnotes_replace_callback(NULL, 'output footer');
  $pattern = '|(<footnotes([^\]]*)>)|';
  if (preg_match($pattern, $text) > 0) {
    $text = preg_replace($pattern, $footer, $text, 1);
    return $text;
  }
  else {
    return $text . "\n\n" . $footer;
  }
}

/**
 * Helper function called from preg_replace_callback() above
 *
 * @see _footnotes_replace_callback()
 * @todo Remove obsolete code.
 */
function pps_migrate_d6_footnotes_replace_callback( $matches, $op = '' ) {
  static $opt_collapse = 0;
  static $n = 0;
  static $store_matches = array();
  static $used_values = array();
  $str = '';

  if ($op == 'prepare') {
    // In the 'prepare' case, the first argument contains the options to use.
    // The name 'matches' is incorrect, we just use the variable anyway.
    $opt_collapse = $matches;
    return 0;
  }

  if( $op == 'output footer' ) {
    $str = '';
    if (count($store_matches) > 0) {
      foreach ($store_matches as $match) {
        $value = $match['value'];
        $text = $match['text'];
        $str .= "fn$value. $text\n\n";
      }

    }
    // Reset the static variables so they can be used again next time
    $n = 0;
    $store_matches = array();
    $used_values = array();
    return $str;
  }


  // Default op: act as called by preg_replace_callback()
  // Random string used to ensure footnote id's are unique, even
  // when contents of multiple nodes reside on same page. (fixes http://drupal.org/node/194558)
  $randstr = _footnotes_helper_randstr();

  $value = '';
  // Did the pattern match anything in the <fn> tag?
  if ($matches[1]) {
    // See if value attribute can parsed, either well-formed in quotes eg <fn value="3">
    if (preg_match('|value=["\'](.*?)["\']|',$matches[1],$value_match)) {
      $value = $value_match[1];
      // Or without quotes eg <fn value=8>
    } elseif (preg_match('|value=(\S*)|',$matches[1],$value_match)) {
      $value = $value_match[1];
    }
  }

  if ($value) {
    // A value label was found. If it is numeric, record it in $n so further notes
    // can increment from there.
    // After adding support for multiple references to same footnote in the body (http://drupal.org/node/636808)
    // also must check that $n is monotonously increasing
    if ( is_numeric($value) && $n < $value ) {
      $n = $value;
    }
  } else {
    // No value label, either a plain <fn> or unparsable attributes. Increment the
    // footnote counter, set label equal to it.
    $n++;
    $value = $n;
  }

  // Remove illegal characters from $value so it can be used as an HTML id attribute.
  $value_id = preg_replace('|[^\w\-]|', '', $value);

  // Create a sanitized version of $text that is suitable for using as HTML attribute
  // value. (In particular, as the title attribute to the footnote link.)
  $allowed_tags = array();
  $text_clean = filter_xss($matches['2'], $allowed_tags);
  // HTML attribute cannot contain quotes
  $text_clean = str_replace('"', "&quot;", $text_clean);
  // Remove newlines. Browsers don't support them anyway and they'll confuse line break converter in filter.module
  $text_clean = str_replace("\n", " ", $text_clean);
  $text_clean = str_replace("\r", "", $text_clean);


  // Create a footnote item as an array.
  $fn = array(
    'value' => $value,
    'text' => $matches[2],
    'text_clean' => $text_clean,
    'fn_id' => 'footnote' . $value_id . '_' . $randstr,
    'ref_id' => 'footnoteref' . $value_id . '_' . $randstr
  );

  // We now allow to repeat the footnote value label, in which case the link to the previously
  // existing footnote is returned. Content of the current footnote is ignored.
  // See http://drupal.org/node/636808
  if( ! in_array( $value, $used_values ) )
  {
    // This is the normal case, add the footnote to $store_matches

    // Store the footnote item.
    array_push( $store_matches, $fn );
    array_push( $used_values, $value );
  }
  else
  {
    // A footnote with the same label already exists

    // Use the text and id from the first footnote with this value.
    // Any text in this footnote is discarded.
    $i = array_search( $value, $used_values );
    $fn['text'] = $store_matches[$i]['text'];
    $fn['text_clean'] = $store_matches[$i]['text_clean'];
    $fn['fn_id'] = $store_matches[$i]['fn_id'];
    // Push the new ref_id into the first occurence of this footnote label
    // The stored footnote thus holds a list of ref_id's rather than just one id
    $ref_array = is_array($store_matches[$i]['ref_id']) ? $store_matches[$i]['ref_id'] : array( $store_matches[$i]['ref_id'] );
    array_push( $ref_array, $fn['ref_id'] );
    $store_matches[$i]['ref_id'] = $ref_array;
  }

  $fn_id = $fn['value'];
  return "[$fn_id]";
}